# =============================================================================
# Mock Backend Services for Development and Testing
# =============================================================================

# User Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: api-gateway
  labels:
    app.kubernetes.io/name: user-service
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: api-gateway-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: user-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: user-service
        app.kubernetes.io/component: backend
        app.kubernetes.io/part-of: api-gateway-system
      annotations:
        prometheus.io/scrape: "false"
    spec:
      containers:
        - name: user-service
          image: httpd:alpine
          ports:
            - name: http
              containerPort: 80
          volumeMounts:
            - name: content
              mountPath: /usr/local/apache2/htdocs
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            requests:
              memory: "32Mi"
              cpu: "10m"
            limits:
              memory: "64Mi"
              cpu: "50m"
      volumes:
        - name: content
          configMap:
            name: user-service-content

---
# User Service ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-service-content
  namespace: api-gateway
  labels:
    app.kubernetes.io/name: user-service
    app.kubernetes.io/component: config
data:
  index.html: |
    {
      "service": "user-service",
      "version": "1.0.0",
      "status": "running",
      "timestamp": "2024-01-01T00:00:00Z"
    }
  health: |
    {
      "status": "healthy",
      "timestamp": "2024-01-01T00:00:00Z",
      "service": "user-service",
      "checks": {
        "database": "ok",
        "cache": "ok"
      }
    }
  users: |
    {
      "users": [
        {
          "id": 1,
          "username": "john_doe",
          "email": "john@example.com",
          "created_at": "2024-01-01T00:00:00Z",
          "active": true
        },
        {
          "id": 2,
          "username": "jane_smith",
          "email": "jane@example.com",
          "created_at": "2024-01-01T00:00:00Z",
          "active": true
        },
        {
          "id": 3,
          "username": "bob_wilson",
          "email": "bob@example.com",
          "created_at": "2024-01-01T00:00:00Z",
          "active": false
        }
      ]
    }

---
# User Service Service
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: api-gateway
  labels:
    app.kubernetes.io/name: user-service
    app.kubernetes.io/component: service
spec:
  selector:
    app.kubernetes.io/name: user-service
  ports:
    - name: http
      port: 80
      targetPort: http

---
# Product Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service
  namespace: api-gateway
  labels:
    app.kubernetes.io/name: product-service
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: api-gateway-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: product-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: product-service
        app.kubernetes.io/component: backend
        app.kubernetes.io/part-of: api-gateway-system
      annotations:
        prometheus.io/scrape: "false"
    spec:
      containers:
        - name: product-service
          image: httpd:alpine
          ports:
            - name: http
              containerPort: 80
          volumeMounts:
            - name: content
              mountPath: /usr/local/apache2/htdocs
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            requests:
              memory: "32Mi"
              cpu: "10m"
            limits:
              memory: "64Mi"
              cpu: "50m"
      volumes:
        - name: content
          configMap:
            name: product-service-content

---
# Product Service ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: product-service-content
  namespace: api-gateway
  labels:
    app.kubernetes.io/name: product-service
    app.kubernetes.io/component: config
data:
  index.html: |
    {
      "service": "product-service",
      "version": "1.0.0",
      "status": "running",
      "timestamp": "2024-01-01T00:00:00Z"
    }
  health: |
    {
      "status": "healthy",
      "timestamp": "2024-01-01T00:00:00Z",
      "service": "product-service",
      "checks": {
        "database": "ok",
        "inventory": "ok"
      }
    }
  products: |
    {
      "products": [
        {
          "id": 1,
          "name": "Laptop Pro",
          "price": 1299.99,
          "category": "Electronics",
          "in_stock": true,
          "description": "High-performance laptop for professionals"
        },
        {
          "id": 2,
          "name": "Coffee Mug",
          "price": 12.99,
          "category": "Kitchen",
          "in_stock": true,
          "description": "Ceramic coffee mug with company logo"
        },
        {
          "id": 3,
          "name": "Wireless Mouse",
          "price": 29.99,
          "category": "Electronics",
          "in_stock": false,
          "description": "Ergonomic wireless mouse"
        }
      ]
    }

---
# Product Service Service
apiVersion: v1
kind: Service
metadata:
  name: product-service
  namespace: api-gateway
  labels:
    app.kubernetes.io/name: product-service
    app.kubernetes.io/component: service
spec:
  selector:
    app.kubernetes.io/name: product-service
  ports:
    - name: http
      port: 80
      targetPort: http
